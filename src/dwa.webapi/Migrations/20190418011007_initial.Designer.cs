// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dwa.infra.data;

namespace dwa.webapi.Migrations
{
    [DbContext(typeof(DwaContext))]
    [Migration("20190418011007_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.catalog_hilo", "'catalog_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.catalog_marca_hilo", "'catalog_marca_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.catalogo_tipo_hilo", "'catalogo_tipo_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dwa.domain.AggregatesModel.CarrinhoAggregate.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId");

                    b.HasKey("Id");

                    b.ToTable("Carrinhos");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CarrinhoAggregate.CarrinhoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarrinhoId");

                    b.Property<int>("CatalogoItemId");

                    b.Property<decimal>("PrecoUnitario");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.ToTable("CarrinhoItem");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CatalogoAggregate.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "catalog_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CatalogoMarcaId");

                    b.Property<int>("CatalogoTipoId");

                    b.Property<string>("Descricao");

                    b.Property<int>("EstoqueDisponivel");

                    b.Property<string>("ImagemFileName");

                    b.Property<int>("MaxStockThreshold");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("OnReorder");

                    b.Property<decimal>("Preco");

                    b.Property<int>("RestockThreshold");

                    b.HasKey("Id");

                    b.HasIndex("CatalogoMarcaId");

                    b.HasIndex("CatalogoTipoId");

                    b.ToTable("Catalogo");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoMarca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "catalog_marca_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CatalogoMarca");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "catalogo_tipo_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CatalogoTipo");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.OrdemAggregate.Ordem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId");

                    b.Property<DateTimeOffset>("DataPedido");

                    b.HasKey("Id");

                    b.ToTable("Ordens");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.OrdemAggregate.OrdemItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrdemId");

                    b.Property<decimal>("PrecoUnitario");

                    b.Property<int>("Unidades");

                    b.HasKey("Id");

                    b.HasIndex("OrdemId");

                    b.ToTable("OrderItens");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Core_Roles");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_RoleClaims");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Core_Users");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserClaims");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserLogins");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_UserRoles");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Core_UserTokens");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CarrinhoAggregate.CarrinhoItem", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.CarrinhoAggregate.Carrinho")
                        .WithMany("Items")
                        .HasForeignKey("CarrinhoId");
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoItem", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoMarca", "CatalogoMarca")
                        .WithMany()
                        .HasForeignKey("CatalogoMarcaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dwa.domain.AggregatesModel.CatalogoAggregate.CatalogoTipo", "CatalogoTipo")
                        .WithMany()
                        .HasForeignKey("CatalogoTipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.OrdemAggregate.Ordem", b =>
                {
                    b.OwnsOne("dwa.domain.AggregatesModel.OrdemAggregate.Endereco", "EnderecoParaEntrega", b1 =>
                        {
                            b1.Property<int>("OrdemId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Estado")
                                .HasMaxLength(60);

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(90);

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(180);

                            b1.HasKey("OrdemId");

                            b1.ToTable("Ordens");

                            b1.HasOne("dwa.domain.AggregatesModel.OrdemAggregate.Ordem")
                                .WithOne("EnderecoParaEntrega")
                                .HasForeignKey("dwa.domain.AggregatesModel.OrdemAggregate.Endereco", "OrdemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.OrdemAggregate.OrdemItem", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.OrdemAggregate.Ordem")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrdemId");

                    b.OwnsOne("dwa.domain.AggregatesModel.OrdemAggregate.CatalogoItemOrdem", "CatalogoItemOrdem", b1 =>
                        {
                            b1.Property<int>("OrdemItemId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CatalogoItemId");

                            b1.Property<string>("PictureUri");

                            b1.Property<string>("ProdutoNome")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.HasKey("OrdemItemId");

                            b1.ToTable("OrderItens");

                            b1.HasOne("dwa.domain.AggregatesModel.OrdemAggregate.OrdemItem")
                                .WithOne("CatalogoItemOrdem")
                                .HasForeignKey("dwa.domain.AggregatesModel.OrdemAggregate.CatalogoItemOrdem", "OrdemItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.RoleClaim", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserClaim", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserLogin", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserRole", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dwa.domain.AggregatesModel.UsuarioAggregate.UserToken", b =>
                {
                    b.HasOne("dwa.domain.AggregatesModel.UsuarioAggregate.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
